g = ggplot()+
geom_histogram(aes(x = x[idx], y = ..density..),
fill = '#557C55', alpha = 0.8)+
geom_density(aes(x = x[idx], y = ..density..),
color = '#062C30', size = 1)+
theme_bw()
return(g)
}
point_plot <- function(x, idx = c(rep(TRUE, length(x)))){
g = ggplot()+
geom_point(aes(x = Variable_df$X[idx], y = Variable_df$Y[idx], color = x[idx] , alpha = .8))+
scale_colour_gradient2(low = "#313552",mid = "#FBF8F1", high = "#632626")+
theme_bw()
return(g)
}
path = '..\\..\\Roaming-Dogs-Data\\'
# Variable_df <- read.csv(paste0(path, "@Taiwan_sampling_village_variable\\Taiwan_sampling_village_variable.shp" ), fileEncoding = 'utf-8')
Variable_shp<-shapefile(paste0(path, "@Taiwan_sampling_village_variable\\Taiwan_sampling_village_variable.shp" ),encoding = 'utf-8')
Variable_shp@data["School"] <- rowSums(Variable_shp@data[c("Ele","Junior" ,"Senior")])
Variable_shp@data["Student"] <- rowSums(Variable_shp@data[c("Ele_stu","Junior_stu" ,"Senior_stu")])
Variable_shp@data[is.na(Variable_shp@data)] <- 0
Variable_shp@data$Nr = Variable_shp@data$Nr %>% as.integer()
colnames(Variable_df)
col_X =
c( "Cluster", "Clu_new_2","Clu_new_3",  "Clu_new_4",  "Clu_new_5",# 分群
"Hospital","Clinic", "Temple", "School", "Train.stat", # 公共建設
"Student", "Train.crow", # 人流
"high_rat",   "mid_rat","low_rat", "M_F_RAT" ,"P_H_CNT","H_CNT", "P_DEN", "YOUN_DEP","OLD_DEP","AGING_IDX", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta") # 村里收入
col_y = c("Nr")
for(i in c(col_X, col_y, "P_CNT")){
Variable_shp@data[i] = sapply(Variable_shp@data[i], function(x) as.numeric(x))
}
library(reshape2)
col_keams = c("P_DEN", "Income_mea", "AGING_IDX")
col_clu = c("Cluster" ,"Clu_new_2","Clu_new_3",  "Clu_new_4",  "Clu_new_5")
df_cul = Variable_shp@data[c(col_keams, col_clu)]
for (i in col_keams){
df_cul[i] <- scale(df_cul[i])
}
colnames(df_cul)
df_cul_ori = melt(df_cul[c(col_keams ,col_clu[1])], id=col_clu[1])
df_cul_2 = melt(df_cul[c(col_keams ,col_clu[2])], id=col_clu[2])
df_cul_3 = melt(df_cul[c(col_keams ,col_clu[3])], id=col_clu[3])
df_cul_4 = melt(df_cul[c(col_keams ,col_clu[4])], id=col_clu[4])
df_cul_5 = melt(df_cul[c(col_keams ,col_clu[5])], id=col_clu[5])
colnames(df_cul_ori)
df_cul_ori = df_cul_ori %>% group_by(Cluster,variable) %>% summarise(mean_value = mean(value))
df_cul_2 = df_cul_2 %>% group_by(Clu_new_2,variable) %>% summarise(mean_value = mean(value))
df_cul_3 = df_cul_3 %>% group_by(Clu_new_3,variable) %>% summarise(mean_value = mean(value))
df_cul_4 = df_cul_4 %>% group_by(Clu_new_4,variable) %>% summarise(mean_value = mean(value))
df_cul_5 = df_cul_5 %>% group_by(Clu_new_5,variable) %>% summarise(mean_value = mean(value))
ggplot(data = df_cul_ori, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Cluster), colour = as.factor(Cluster), shape = as.factor(Cluster),group =  as.factor(Cluster)))+
geom_line() + geom_point()
ggplot(data = df_cul_2, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Clu_new_2), colour = as.factor(Clu_new_2), shape = as.factor(Clu_new_2),group =  as.factor(Clu_new_2)))+
geom_line() + geom_point()
ggplot(data = df_cul_3, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Clu_new_3), colour = as.factor(Clu_new_3), shape = as.factor(Clu_new_3),group =  as.factor(Clu_new_3)))+
geom_line() + geom_point()
ggplot(data = df_cul_4, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Clu_new_4), colour = as.factor(Clu_new_4), shape = as.factor(Clu_new_4),group =  as.factor(Clu_new_4)))+
geom_line() + geom_point()
ggplot(data = df_cul_5, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Clu_new_5), colour = as.factor(Clu_new_5), shape = as.factor(Clu_new_5),group =  as.factor(Clu_new_5)))+
geom_line() + geom_point()
col_keams = c("P_DEN", "high_rat", "AGING_IDX")
col_clu = c("Cluster" ,"Clu_new_2","Clu_new_3",  "Clu_new_4",  "Clu_new_5")
df_cul = Variable_shp@data[c(col_keams, col_clu)]
for (i in col_keams){
df_cul[i] <- scale(df_cul[i])
}
library(reshape2)
col_keams = c("P_DEN", "high_rat", "AGING_IDX")
col_clu = c("Cluster" ,"Clu_new_2","Clu_new_3",  "Clu_new_4",  "Clu_new_5")
df_cul = Variable_shp@data[c(col_keams, col_clu)]
for (i in col_keams){
df_cul[i] <- scale(df_cul[i])
}
colnames(df_cul)
df_cul_ori = melt(df_cul[c(col_keams ,col_clu[1])], id=col_clu[1])
df_cul_2 = melt(df_cul[c(col_keams ,col_clu[2])], id=col_clu[2])
df_cul_3 = melt(df_cul[c(col_keams ,col_clu[3])], id=col_clu[3])
df_cul_4 = melt(df_cul[c(col_keams ,col_clu[4])], id=col_clu[4])
df_cul_5 = melt(df_cul[c(col_keams ,col_clu[5])], id=col_clu[5])
colnames(df_cul_ori)
df_cul_ori = df_cul_ori %>% group_by(Cluster,variable) %>% summarise(mean_value = mean(value))
df_cul_2 = df_cul_2 %>% group_by(Clu_new_2,variable) %>% summarise(mean_value = mean(value))
df_cul_3 = df_cul_3 %>% group_by(Clu_new_3,variable) %>% summarise(mean_value = mean(value))
df_cul_4 = df_cul_4 %>% group_by(Clu_new_4,variable) %>% summarise(mean_value = mean(value))
df_cul_5 = df_cul_5 %>% group_by(Clu_new_5,variable) %>% summarise(mean_value = mean(value))
ggplot(data = df_cul_ori, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Cluster), colour = as.factor(Cluster), shape = as.factor(Cluster),group =  as.factor(Cluster)))+
geom_line() + geom_point()
ggplot(data = df_cul_2, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Clu_new_2), colour = as.factor(Clu_new_2), shape = as.factor(Clu_new_2),group =  as.factor(Clu_new_2)))+
geom_line() + geom_point()
ggplot(data = df_cul_3, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Clu_new_3), colour = as.factor(Clu_new_3), shape = as.factor(Clu_new_3),group =  as.factor(Clu_new_3)))+
geom_line() + geom_point()
ggplot(data = df_cul_4, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Clu_new_4), colour = as.factor(Clu_new_4), shape = as.factor(Clu_new_4),group =  as.factor(Clu_new_4)))+
geom_line() + geom_point()
ggplot(data = df_cul_5, mapping = aes(x = variable, y = mean_value, linetype = as.factor(Clu_new_5), colour = as.factor(Clu_new_5), shape = as.factor(Clu_new_5),group =  as.factor(Clu_new_5)))+
geom_line() + geom_point()
for(i in c( "Temple",  "School", "Train.stat",  "Clinic","Ele_stu", "Junior_stu" ,"Senior_stu", "Train.crow","H_CNT")){
i_new = paste0(i, "_den")
Variable_shp@data[i_new] = Variable_shp@data[i]/Variable_shp@data$Area_sqkm
}
Variable_shp@data["Nr_den"] = Variable_shp@data["Nr"]/Variable_shp@data$Area_sqkm
Variable_df =Variable_shp@data
col_X =
c( "Clu_new_3", # 分群
"Clinic_den", "Temple_den", "School_den" ,"Train.stat_den", # 公共建設
"Train.crow", # 人流
"M_F_RAT" ,"YOUN_DEP","H_CNT_den", "P_H_CNT", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta") # 村里收入
col_y = c('Nr')
col_y_den =c('Nr_den')
for (i in col_X[col_X != "Clu_new_3"]){
Variable_df[i] <- scale(Variable_df[i])
Variable_shp@data[i] <-scale(Variable_shp@data[i])
}
g = ggplot(data = Variable_df)+
geom_boxplot(aes(x = as.factor(Cluster), y = Nr))
g
g = ggplot(data = Variable_df)+
geom_boxplot(aes(x = as.factor(Clu_new_3), y = Nr))
g
pdf_plot <- function(x, idx = c(rep(TRUE, length(x)))){
g = ggplot()+
geom_histogram(aes(x = x[idx], y = ..density..),
fill = '#557C55', alpha = 0.8)+
geom_density(aes(x = x[idx], y = ..density..),
color = '#062C30', size = 1)+
theme_bw()
return(g)
}
idx = Variable_shp@data$Clu_new_3
idx_new = c()
for (i in c(1:length(idx))){
if(idx[i] == 0){
idx_new[i] = 3
}else if(idx[i] == 1){
idx_new[i] = 2
}else if(idx[i] == 2){
idx_new[i] = 1
}else{
idx_new[i] = NA
}
}
Variable_shp@data$Clu_new_3 = idx_new
col_X =
c( "Cluster", "Clu_new_2","Clu_new_3",  "Clu_new_4",  "Clu_new_5",# 分群
"Hospital","Clinic", "Temple", "School", "Train.stat", # 公共建設
"Student", "Train.crow", # 人流
"high_rat",   "mid_rat","low_rat", "M_F_RAT" ,"P_H_CNT","H_CNT", "P_DEN", "YOUN_DEP","OLD_DEP","AGING_IDX", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta") # 村里收入
col_y = c("Nr")
for(i in c(col_X, col_y, "P_CNT")){
Variable_shp@data[i] = sapply(Variable_shp@data[i], function(x) as.numeric(x))
}
for(i in c( "Temple",  "School", "Train.stat",  "Clinic","Ele_stu", "Junior_stu" ,"Senior_stu", "Train.crow","H_CNT")){
i_new = paste0(i, "_den")
Variable_shp@data[i_new] = Variable_shp@data[i]/Variable_shp@data$Area_sqkm
}
Variable_shp@data["Nr_den"] = Variable_shp@data["Nr"]/Variable_shp@data$Area_sqkm
Variable_df =Variable_shp@data
col_X =
c( "Clu_new_3", # 分群
"Clinic_den", "Temple_den", "School_den" ,"Train.stat_den", # 公共建設
"Train.crow", # 人流
"M_F_RAT" ,"YOUN_DEP","H_CNT_den", "P_H_CNT", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta") # 村里收入
col_y = c('Nr')
col_y_den =c('Nr_den')
for (i in col_X[col_X != "Clu_new_3"]){
Variable_df[i] <- scale(Variable_df[i])
Variable_shp@data[i] <-scale(Variable_shp@data[i])
}
g = ggplot(data = Variable_df)+
geom_boxplot(aes(x = as.factor(Cluster), y = Nr))
g
g = ggplot(data = Variable_df)+
geom_boxplot(aes(x = as.factor(Clu_new_3), y = Nr))
g
corr = cor(Variable_df[c(col_y, col_y_den,col_X)])
idx = abs(corr[,col_y_den])>.05
col_X_den = c("Temple_den",  "School_den", "Train.stat_den",  "Clinic_den")
col_X_02 = names(corr[idx,col_y_den]) %>% tail(-2)
corr[idx,idx]
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clu_new_3", "Clinic_den", "Temple_den","Income_mea" )
f = Nr~Clu_new_3+Clinic_den+Temple_den+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
X = Variable_df$X,
Y = Variable_df$Y,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.fit = fit.resp)
glm.NB<- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr #20
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = 112,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = 112,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
residual_df["gwr.PO.res.pear"] = res.pear
residual_df["gwr.PO.fit"] = gwr.PO$SDF$yhat
summary(gwr.PO$SDF)
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$glm.NB.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$gwr.PO.res
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clu_new_3", "Clinic_den", "Temple_den" )
f = Nr~Clu_new_3+Clinic_den+Temple_den+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
col_X_03 = c("Clu_new_3", "Clinic_den","School_den", "Temple_den" )
f = Nr~Clu_new_3+Clinic_den+Temple_den+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clu_new_3", "Clinic_den","School_den", "Temple_den" )
f = Nr~Clu_new_3+Clinic_den+Temple_den+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clu_new_3", "Clinic_den","School_den", "Temple_den" )
f = Nr~Clu_new_3+Clinic_den+School_den+Temple_den+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
f = Nr~Clu_new_3+Clinic_den+School_den+Temple_den+offset(log(Area_sqkm))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
X = Variable_df$X,
Y = Variable_df$Y,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.fit = fit.resp)
glm.NB<- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clinic_den", "Temple_den" )
f = Nr~Clu_new_3+Clinic_den+School_den+Temple_den+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clinic_den", "Temple_den" )
f = Nr~Clinic_den+Temple_den+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
X = Variable_df$X,
Y = Variable_df$Y,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.fit = fit.resp)
glm.NB<- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr #21
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = 112,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
residual_df["gwr.PO.res.pear"] = res.pear
residual_df["gwr.PO.fit"] = gwr.PO$SDF$yhat
summary(gwr.PO$SDF)
library(sppois)
# 使用距離定義
Variable_sf = st_as_sf(Variable_shp)
ncpoint <- st_centroid(st_geometry(Variable_sf))
nb.k <- knn2nb(knearneigh(ncpoint))
max = max(unlist(nbdists(nb.k, ncpoint)))
nb.dist <- dnearneigh(ncpoint, 0, 0.5*max)
nb.dist2 <- dnearneigh(ncpoint, 0, max)
nb.dist3 <- dnearneigh(ncpoint, 0, 1.5*max)
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$glm.NB.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$gwr.PO.res
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
## Transform the dataframe into a SpatialPointDataFrame
## The objective is to obtain a spatial object
coordinates(residual_df)=~X+Y
class(residual_df)
idx = residual_df$glm.PO.res.pear<100
Vario_glm.PO = variogram(glm.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.PO)
idx = residual_df$glm.NB.res.pear<10
Vario_glm.NB=variogram(glm.NB.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.NB)
idx = residual_df$gwr.PO.res.pear>-90
Vario_gwr.PO=variogram(gwr.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_gwr.PO)
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clinic_den", "Temple_den" )
f = Nr~Clinic_den+Temple_den+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
X = Variable_df$X,
Y = Variable_df$Y,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.fit = fit.resp)
glm.NB<- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
View(residual_df)
View(residual_df)
bw.gwr #21
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = 112,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
residual_df["gwr.PO.res.pear"] = res.pear
residual_df["gwr.PO.fit"] = gwr.PO$SDF$yhat
summary(gwr.PO$SDF)
point_plot <- function(x, idx = c(rep(TRUE, length(x)))){
g = ggplot()+
geom_point(aes(x = Variable_df$X[idx], y = Variable_df$Y[idx], color = x[idx] , size = x[idx]))+
scale_colour_gradient2(low = "#313552",mid = "#FBF8F1", high = "#632626")+
theme_bw()
return(g)
}
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
p1
g = ggplot()+
geom_point(aes(x = Variable_df$X[idx], y = Variable_df$Y[idx], color = x[idx] , size = x[idx]))+
scale_colour_gradient2(low = "#313552",mid = "#FBF8F1", high = "#632626")
```{r Point_Plot}
point_plot <- function(x, idx = c(rep(TRUE, length(x)))){
g = ggplot()+
geom_point(aes(x = Variable_df$X[idx], y = Variable_df$Y[idx], color = x[idx] , size = x[idx]))+
scale_colour_gradient2(low = "#313552",mid = "#FBF8F1", high = "#632626")
return(g)
}
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$glm.NB.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$gwr.PO.res
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
