idx = abs(corr[,col_y_den])>.05
col_X_den = c("Temple_den",  "School_den", "Train.stat_den",  "Clinic_den")
col_X_02 = names(corr[idx,col_y_den]) %>% tail(-2)
corr[idx,idx]
ggpairs(Variable_df, columns =c(col_X_02,col_y_den))
# library(glmnet)
# X = Variable_df[col_X] %>% data.matrix()
# y = Variable_df[col_y] %>% data.matrix()
#
#
# fit = glmnet(X, y, family="poisson", nlambda=200, alpha=1, offset = log(Variable_df$Area_sqkm))
# print(fit)
# coef(fit, s=c(fit$lambda[100],0.1))
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clu_new_3","Clinic_den", "Temple_den" )
f = Nr~I(Clu_new_3^2)+Clinic_den+Temple_den+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
X = Variable_df$X,
Y = Variable_df$Y,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.fit = fit.resp)
glm.NB<- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
# bw.gwr <- bw.ggwr(f,
#                  data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
#                  family = "poisson",
#                  approach = "AICc",
#                  kernel = "gaussian",
#                  adaptive = TRUE,
#                  dMat = DM )
core.HR = mean(.3+.3+.33+.25)*10000; ext.HR = mean(7.7+5.7+5.7+5.6)*10000
core.bw.gwr = (core.HR/pi)^.5; ext.bw.gwr = (ext.HR/pi)^.5;
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = ext.bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
residual_df["gwr.PO.res.pear"] = res.pear
residual_df["gwr.PO.fit"] = gwr.PO$SDF$yhat
summary(gwr.PO$SDF)
# install.packages("remotes")
# remotes::install_github("gregmacfarlane/sppois")
library(sppois)
# 使用距離定義
Variable_sf = st_as_sf(Variable_shp)
ncpoint <- st_centroid(st_geometry(Variable_sf))
nb.k <- knn2nb(knearneigh(ncpoint))
max = max(unlist(nbdists(nb.k, ncpoint)))
nb.dist <- dnearneigh(ncpoint, 0, 0.5*max)
nb.dist2 <- dnearneigh(ncpoint, 0, max)
nb.dist3 <- dnearneigh(ncpoint, 0, 1.5*max)
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr #112
mix.gwr.PO <- gwr.mixed(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
fixed.vars = c("Cluster","M_F_RAT","YOUN_DEP","Income_sta"),
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
bw.gwr
## Transform the dataframe into a SpatialPointDataFrame
## The objective is to obtain a spatial object
coordinates(residual_df)=~X+Y
class(residual_df)
idx = residual_df$glm.PO.res.pear<100
Vario_glm.PO = variogram(glm.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.PO)
idx = residual_df$glm.NB.res.pear<10
Vario_glm.NB=variogram(glm.NB.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.NB)
idx = residual_df$gwr.PO.res.pear>-90
Vario_gwr.PO=variogram(gwr.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_gwr.PO)
#
# col_X_03 = c("Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_mea")
# f = Nr~Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_mea+offset(log(Area_sqkm))
# col_offset = c("Area_sqkm")
###
"Cluster"
col_X_03 = c("Clu_new_3","Clinic_den", "Temple_den" )
f = Nr~Clu_new_3+Clinic_den+Temple_den+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
ggpairs(Variable_df, columns =c(col_X_03,col_y_den))
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
X = Variable_df$X,
Y = Variable_df$Y,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.fit = fit.resp)
glm.NB<- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
# bw.gwr <- bw.ggwr(f,
#                  data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
#                  family = "poisson",
#                  approach = "AICc",
#                  kernel = "gaussian",
#                  adaptive = TRUE,
#                  dMat = DM )
core.HR = mean(.3+.3+.33+.25)*10000; ext.HR = mean(7.7+5.7+5.7+5.6)*10000
core.bw.gwr = (core.HR/pi)^.5; ext.bw.gwr = (ext.HR/pi)^.5;
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = ext.bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
residual_df["gwr.PO.res.pear"] = res.pear
residual_df["gwr.PO.fit"] = gwr.PO$SDF$yhat
summary(gwr.PO$SDF)
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$glm.NB.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$gwr.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
point_plot <- function(x, idx = c(rep(TRUE, length(x)))){
g = ggplot()+
geom_point(aes(x = Variable_df$X[idx], y = Variable_df$Y[idx], color = x[idx] , size = abs(x[idx])))+
scale_colour_gradient2(low = "#313552",mid = "#FBF8F1", high = "#632626")
return(g)
}
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$gwr.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
## Transform the dataframe into a SpatialPointDataFrame
## The objective is to obtain a spatial object
coordinates(residual_df)=~X+Y
class(residual_df)
idx = residual_df$glm.PO.res.pear<100
Vario_glm.PO = variogram(glm.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.PO)
idx = residual_df$glm.NB.res.pear<10
Vario_glm.NB=variogram(glm.NB.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.NB)
idx = residual_df$gwr.PO.res.pear>-90
Vario_gwr.PO=variogram(gwr.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_gwr.PO)
idx = residual_df$gwr.PO.res.pear>-90
Vario_gwr.PO=variogram(Nr~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_gwr.PO)
idx = residual_df$gwr.PO.res.pear>-90
Vario_Nr =variogram(Nr~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_Nr)
idx = residual_df$gwr.PO.res.pear>-90
Vario_gwr.PO=variogram(gwr.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_gwr.PO)
idx = residual_df$glm.NB.res.pear<10
Vario_glm.NB=variogram(glm.NB.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.NB)
idx = residual_df$glm.PO.res.pear<100
Vario_glm.PO = variogram(glm.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.PO)
p1 = pdf_plot(res,res<100); p2 = point_plot(res,res<100)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res,res<100); p2 = point_plot(res,res<100)
ggpubr::ggarrange(p1, p2, ncol = 2)
p1 = pdf_plot(res,res<10); p2 = point_plot(res,res<1)
res = residual_df$glm.NB.res.pear
p1 = pdf_plot(res,res<10); p2 = point_plot(res,res<1)
ggpubr::ggarrange(p1, p2, ncol = 2)
p1 = pdf_plot(res,res<5); p2 = point_plot(res,res<5)
ggpubr::ggarrange(p1, p2, ncol = 2)
## Transform the dataframe into a SpatialPointDataFrame
## The objective is to obtain a spatial object
coordinates(residual_df)=~X+Y
idx = residual_df$glm.PO.res.pear<100
Vario_glm.PO = variogram(glm.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.PO)
idx = residual_df$glm.NB.res.pear<10
Vario_glm.NB=variogram(glm.NB.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.NB)
idx = residual_df$gwr.PO.res.pear>-90
Vario_gwr.PO=variogram(gwr.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_gwr.PO)
idx = residual_df$gwr.PO.res.pear>-900
Vario_Nr =variogram(Nr~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_Nr)
idx = residual_df$glm.NB.res.pear<100
Vario_glm.NB=variogram(glm.NB.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.NB)
idx = residual_df$glm.PO.res.pear<1000
Vario_glm.PO = variogram(glm.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.PO)
idx = residual_df$glm.NB.res.pear<10
Vario_glm.NB=variogram(glm.NB.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.NB)
idx = residual_df$glm.NB.res.pear<100
Vario_glm.NB=variogram(glm.NB.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.NB)
idx = residual_df$glm.PO.res.pear<100
Vario_glm.PO = variogram(glm.PO.res.pear~1, ## Here, we assume that there is a constant trend in the data.
## It would not have been the case for an elevation study along a hillslope where
##there would have been a clear elevation trend regarding the spatial coordinates (along the hillslope)
data=residual_df[idx,])
plot(Vario_glm.PO)
mean(residual_df$glm.PO.res.pear[idx,])
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res,res<100); p2 = point_plot(res,res<100)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$glm.NB.res.pear
p1 = pdf_plot(res,res<5); p2 = point_plot(res,res<5)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residual_df$gwr.PO.res.pear
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
mean(res[idx,])
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res,res<100); p2 = point_plot(res,res<100)
ggpubr::ggarrange(p1, p2, ncol = 2)
mean(res[idx,])
mean(res[idx])
mean(res[res<100]), var(res[res<100])
res[res<100]
var(res[res<100])
mean(res[res<100])
mean(res[res<100])
var(res[res<100])
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res,res<100); p2 = point_plot(res,res<100)
ggpubr::ggarrange(p1, p2, ncol = 2)
mean(res[res<100])
var(res[res<100])
glm.qus.PO <- glm(f,  family = qusipoisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
glm.qua.PO <- glm(f,  family = quasipoisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.qua.PO)
fit.resp = predict(glm.qua.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.qua.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.qua.PO, type = "pearson")
res.work = residuals(glm.qua.PO, type = "working")
residual_df["glm.qua.PO.pear"] = res.pear
glm.qua.PO <- glm(f,  family = quasipoisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.qua.PO)
fit.resp = predict(glm.qua.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.qua.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.qua.PO, type = "pearson")
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
X = Variable_df$X,
Y = Variable_df$Y,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.fit = fit.resp)
glm.qua.PO <- glm(f,  family = quasipoisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.qua.PO)
fit.resp = predict(glm.qua.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.qua.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.qua.PO, type = "pearson")
res.work = residuals(glm.qua.PO, type = "working")
residual_df["glm.qua.PO.pear"] = res.pear
residual_df["glm.qua.PO.fit"] = fit.resp
glm.NB<- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
# bw.gwr <- bw.ggwr(f,
#                  data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
#                  family = "poisson",
#                  approach = "AICc",
#                  kernel = "gaussian",
#                  adaptive = TRUE,
#                  dMat = DM )
core.HR = mean(.3+.3+.33+.25)*10000; ext.HR = mean(7.7+5.7+5.7+5.6)*10000
core.bw.gwr = (core.HR/pi)^.5; ext.bw.gwr = (ext.HR/pi)^.5;
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = ext.bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
residual_df["gwr.PO.res.pear"] = res.pear
residual_df["gwr.PO.fit"] = gwr.PO$SDF$yhat
summary(gwr.PO$SDF)
glm.qua.PO <- glm(f,  family = quasipoisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.qua.PO)
fit.resp = predict(glm.qua.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.qua.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.qua.PO, type = "pearson")
res.work = residuals(glm.qua.PO, type = "working")
residual_df["glm.qua.PO.res.pear"] = res.pear
residual_df["glm.qua.PO.fit"] = fit.resp
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=11, fig.height=4.5)
library(glmmfields)
glm.PO.S <- glmmfields(f,
data = Variable_df[c(col_y, col_X_03, col_offset, "X", "Y")],
family = poisson(link = "log"),
lat = "X", lon = "Y", nknots = 12, iter = 500, chains = 1,
prior_intercept = student_t(3, 0, 10),
prior_beta = student_t(3, 0, 3),
prior_sigma = half_t(3, 0, 3),
prior_gp_theta = half_t(3, 0, 10),
prior_gp_sigma = half_t(3, 0, 3),
seed = 123 # passed to rstan::sampling()
)
summary(glm.PO.S$model@inits)
plot(glm.PO.S, type = "spatial-residual", link = TRUE) +
geom_point(size = 3)
plot(glm.PO.S, type = "spatial-residual", link = TRUE)
plot(m_spatial, type = "residual-vs-fitted")
plot(glm.PO.S, type = "residual-vs-fitted")
plot(glm.PO.S, type = "spatial-residual", link = TRUE)
library(glmmfields)
glm.PO.S <- glmmfields(f,
data = Variable_df[c(col_y, col_X_03, col_offset, "X", "Y")],
family = poisson(link = "log"),
lat = "Y", lon = "X", nknots = 12, iter = 500, chains = 1,
prior_intercept = student_t(3, 0, 10),
prior_beta = student_t(3, 0, 3),
prior_sigma = half_t(3, 0, 3),
prior_gp_theta = half_t(3, 0, 10),
prior_gp_sigma = half_t(3, 0, 3),
seed = 123 # passed to rstan::sampling()
)
summary(glm.PO.S$model@inits)
plot(glm.PO.S, type = "spatial-residual", link = TRUE)
plot(glm.PO.S, type = "residual-vs-fitted")
library(glmmfields)
glm.PO.S <- glmmfields(f,
data = Variable_df[c(col_y, col_X_03, col_offset, "X", "Y")],
family = poisson(link = "log"),
lat = "Y", lon = "X",
nknots = 22,
iter = 500,
chains = 1,
prior_intercept = student_t(3, 0, 10),
prior_beta = student_t(3, 0, 3),
prior_sigma = half_t(3, 0, 3),
prior_gp_theta = half_t(3, 0, 10),
prior_gp_sigma = half_t(3, 0, 3),
seed = 123 # passed to rstan::sampling()
)
summary(glm.PO.S$model@inits)
plot(glm.PO.S, type = "spatial-residual", link = TRUE)
plot(glm.PO.S, type = "residual-vs-fitted")
plot(glm.PO.S, type = "prediction", link = TRUE)
plot(glm.PO.S, type = "prediction", link = F)
plot(glm.PO.S, type = "spatial-residual", link = F)
plot(glm.PO.S, type = "spatial-residual", link = T)
??half_t
half_t(3, 0, 3)
half_t(3, 0, 1)
plot(glm.PO.S, type = "prediction", link = F)
p1 = plot(glm.PO.S, type = "prediction", link = F) ; p2 = plot(glm.PO.S, type = "prediction", link = T)
library(glmmfields)
glm.PO.S <- glmmfields(f,
data = Variable_df[c(col_y, col_X_03, col_offset, "X", "Y")],
family = poisson(link = "log"),
lat = "Y", lon = "X",
nknots = 50,
iter = 500,
chains = 1,
prior_intercept = student_t(3, 0, 10),
prior_beta = student_t(3, 0, 3),
prior_sigma = half_t(3, 0, 3),
prior_gp_theta = half_t(3, 0, 10),
prior_gp_sigma = half_t(3, 0, 3),
seed = 123 # passed to rstan::sampling()
)
summary(glm.PO.S$model@inits)
p1 = plot(glm.PO.S, type = "prediction", link = F) ; p2 = plot(glm.PO.S, type = "prediction", link = T)
plot(glm.PO.S, type = "spatial-residual", link = T)
plot(glm.PO.S, type = "residual-vs-fitted")
res = residual_df$glm.PO.res.pear
p1 = pdf_plot(res,res<100); p2 = point_plot(res,res<100)
p1 = plot(glm.PO.S, type = "prediction", link = F) ; p2 = plot(glm.PO.S, type = "prediction", link = T)
plot(glm.PO.S, type = "residual-vs-fitted")
ggpubr::ggarrange(p1, p2, ncol = 2)
plot(glm.PO.S, type = "spatial-residual", link = T)
p1 = plot(glm.PO.S, type = "spatial-residual", link = T); p2 = plot(glm.PO.S, type = "spatial-residual", link = F)
ggpubr::ggarrange(p1, p2, ncol = 2)
plot(glm.PO.S, type = "residual-vs-fitted")
