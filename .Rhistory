- 因為里裡面的學生人數與扶幼率有極大正相關，因此使用扶幼率。
- 太多里沒有醫院，與之去除
```{r}
col_X =
c( "Cluster", # 分群
"Clinic", "Temple", "School" ,"Train.stat", # 公共建設
"Train.crow", # 人流
"M_F_RAT" ,"YOUN_DEP", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta") # 村里收入
col_y = c('Nr')
```
```{r}
sum( Variable_df$Nr<250)
pdf_plot(Variable_df$Nr, idx = Variable_df$Nr<250)
point_plot(Variable_df$Nr, idx = Variable_df$Nr<250)
sum(Variable_df$Clinic == 0)/ length(Variable_df$Clinic)
```
```{r 轉成數值}
for(i in c(col_X, col_y, "P_CNT")){
Variable_shp@data[i] = sapply(Variable_shp@data[i], function(x) as.numeric(x))
Variable_df[i] = sapply(Variable_df[i], function(x) as.numeric(x))
}
```
### 轉成密度(公共建設分母為人口，遊蕩犬分母為面積)
```{r 轉成密度}
for(i in c( "Temple",  "School", "Train.stat",  "Clinic","Ele_stu", "Junior_stu" ,"Senior_stu", "Train.crow")){
i_new = paste0(i, "_den")
Variable_shp@data[i_new] = Variable_shp@data[i]/Variable_shp@data$P_CNT
Variable_df[i_new] = Variable_df[i]/Variable_df$P_CNT
}
Variable_shp@data["Nr_den"] = Variable_shp@data["Nr"]/Variable_shp@data$Area_sqkm
Variable_df["Nr_den"] = Variable_df["Nr"]/Variable_df$Area_sqkm
```
```{r Varaible name 02}
col_X =
c( "Temple_den",  "School_den", "Train.stat_den",  "Clinic_den", # 公共建設
"Train.crow_den",
"M_F_RAT",  "YOUN_DEP", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta")
col_y= c('Nr')
col_y_den =c('Nr_den')
```
### Scale the Data
```{r scale the data}
# for (i in col_X[col_X != "Cluster"]){
#
#     Variable_df[i] <- scale(Variable_df[i])
#     Variable_shp@data[i] <-scale(Variable_shp@data[i])
#
# }
```
```{r Nr_den pdf}
idx_clu_1 = Variable_df$Cluster == 1
sum(Variable_df$Nr[!idx_clu_1]==0)/sum(!idx_clu_1); sum(Variable_df$Nr[idx_clu_1]==0)/sum(idx_clu_1); sum(Variable_df$Nr==0)/nrow(Variable_df)
pdf_plot(Variable_df$Nr[!idx_clu_1])+xlab("density of Nr(Cluster is 2,3,4 都市化較低)")
pdf_plot(Variable_df$Nr[idx_clu_1])+xlab("density of Nr (Cluster is 1 都市化較高)")
```
```{r}
g = ggplot(data = Variable_df)+
geom_boxplot(aes(x = as.factor(Cluster), y = Nr))
g
```
## Correlation
```{r correlation Cluster == 1}
corr = cor(Variable_df[idx_clu_1,c(col_y, col_y_den,col_X)])
idx = abs(corr[,col_y_den])>.05 | abs(corr[,col_y])>.05
col_X_den = c("Temple_den",  "School_den", "Train.stat_den",  "Clinic_den")
corr[col_X_den,col_X_den]
col_X_02 = names(corr[idx,col_y_den]) %>% tail(-2)
corr[idx,idx]
```
```{r scatter plot}
ggpairs(Variable_df, columns =c(col_X_02,col_y_den))
```
```{r correlation Cluster != 1}
corr = cor(Variable_df[!idx_clu_1,c(col_y, col_y_den,col_X)])
idx = abs(corr[,col_y_den])>.1 | abs(corr[,col_y])>.1
col_X_den = c("Temple_den",  "School_den", "Train.stat_den",  "Clinic_den")
corr[col_X_den,col_X_den]
col_X_02 = names(corr[idx,col_y_den]) %>% tail(-1)
corr[idx,idx]
```
```{r scatter plot}
ggpairs(Variable_df, columns =c(col_X_02,col_y))
```
## LASSO (Variables Selection)
- https://rpubs.com/chengjunhou/LASSO
```{r}
library(glmnet)
X = Variable_df[col_X] %>% data.matrix()
y = Variable_df[col_y] %>% data.matrix()
fit = glmnet(X, y, family="poisson", nlambda=70, alpha=1, offset = log(Variable_df$Area_sqkm))
print(fit)
```
```{r}
coef(fit, s=c(fit$lambda[100],0.1))
```
## GLM_Poisson
先只用各里寺廟、學校、診所密度與男女比、里平均收入建模
```{r glm.PO}
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
```
```{r glm.PO.res & fitted values}
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
qplot( c(1:sum(res.pear<1000)),res.pear[res.pear<1000], size = 2)
```
```{r glm.PO.res}
p1 = pdf_plot(res.pear, res.pear<60); p2 = point_plot(res.pear, res.pear<60)
ggpubr::ggarrange(p1, p2, ncol = 2)
qplot( c(1:length(res.pear)),res.pear)
```
```{r residual_df}
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.res.work =res.work,
glm.PO.fit = fit.resp)
```
## GLM_NB
- https://bookdown.org/roback/bookdown-BeyondMLR/ch-poissonreg.html
- https://fukamilab.github.io/BIO202/04-C-zero-data.html
先只用各里寺廟、學校、診所密度與男女比、里平均收入建模
```{r glm.NB}
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.NB <- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
```
```{r glm.PO.res & fitted values}
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
```
```{r glm.NB.res}
p1 = pdf_plot(res.pear, res.pear<10); p2 = point_plot(res.pear,res.pear<10)
ggpubr::ggarrange(p1, p2, ncol = 2)
```
```{r}
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
```
## Check the original data
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
f = Nr~Cluster+School_den+Clinic_den+M_F_RAT+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
library(glmmfields)
glm.PO.S <- glmmfields(f,
data = Variable_df[c(col_y, col_X_03, col_offset, "X", "Y")],
family = poisson(link = "log"),
lat = "X", lon = "Y", nknots = 12, iter = 500, chains = 1,
prior_intercept = student_t(3, 0, 10),
prior_beta = student_t(3, 0, 3),
prior_sigma = half_t(3, 0, 3),
prior_gp_theta = half_t(3, 0, 10),
prior_gp_sigma = half_t(3, 0, 3),
seed = 123 # passed to rstan::sampling()
)
summary(glm.PO.S$model)
summary(glm.PO.S$model)
summary(glm.PO.S$knots)
summary(glm.PO.S$model$`spatialEffectsKnots[1,9]`)
summary(glm.PO.S$model$gp_sigma)
summary(glm.PO.S$model)
summary(glm.PO.S$model@model_name)
summary(glm.PO.S$model@par_dims)
summary(glm.PO.S$model@stanmodel)
summary(glm.PO.S$model@model_pars)
summary(glm.PO.S$model@inits)
col_X_03 = c("Cluster", "School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
f = Nr~.
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
# bw.gwr <- bw.ggwr(f,
#                  data = Variable_shp[c(col_X_03, col_y)],
#                  family = "poisson",
#                  approach = "AICc",
#                  kernel = "gaussian",
#                  adaptive = TRUE,
#                  dMat = DM )
bw.gwr #113
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~.
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y)],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr #113
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y)],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr #112
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
summary(gwr.PO$SDF)
p1 = pdf_plot(gwr.PO$SDF$residual); p2 = point_plot(gwr.PO$SDF$residual)
ggpubr::ggarrange(p1, p2, ncol = 2)
summary(gwr.PO$SDF$Temple_den)
summary(gwr.PO$SDF$Intercept_TV)
summary(gwr.PO$SDF$yhat)
(gwr.PO$SDF$yhat)
summary(gwr.PO$SDF$yhat+ gwr.PO$SDF$residual)
residual_df["gwr.PO.res_hat"] = gwr.PO$SDF$residual+gwr.PO$SDF$yhat
View(residual_df)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/sqrt(gwr.PO$SDF$residual)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$residual)^.5
p1 = pdf_plot(res.pear); p2 = point_plot(res.pear)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["gwr.PO.res"] = res.pear
View(residual_df)
(gwr.PO$SDF$residual)^.5
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
p1 = pdf_plot(res.pear); p2 = point_plot(res.pear)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["gwr.PO.res"] = res.pear
View(residual_df)
residual_df["gwr.PO.res"] = res.pear
residual_df["gwr.PO.fit"] = gwr.PO$SDF$yhat
p1 = pdf_plot(res.pear,res.pear>-50 ); p2 = point_plot(res.pear,res.pear>-50)
ggpubr::ggarrange(p1, p2, ncol = 2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=14, fig.height=6)
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
mix.gwr.PO <- gwr.mixed(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
fixed.vars = c("Cluster","M_F_RAT","YOUN_DEP","Income_sta"),
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
library(GWmodel)      ### GW models
library(dplyr)
library(sp)           ## Data management
library(car)          ## vif
library(spdep)        ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(raster)       ## spatial data
library(grid)         # plot
library(gridExtra)    # Multiple plot
library(ggplot2)      # Multiple plot
library(gtable)
library(GGally)       # 相關係數圖矩陣（scatter plot matrix）
library(maptools)
library(MASS)
library(tmap)
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
bw.gwr <- bw.gwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
col_X_03 = c("Cluster","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
col_X_03 = c("Cluster","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
```{r}
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
col_X_03 = c("Cluster","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr #112
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
for(i in c( "Temple",  "School", "Train.stat",  "Clinic","Ele_stu", "Junior_stu" ,"Senior_stu", "Train.crow")){
i_new = paste0(i, "_den")
Variable_shp@data[i_new] = Variable_shp@data[i]/Variable_shp@data$Area_sqkm
Variable_df[i_new] = Variable_df[i]/Variable_df$Area_sqkm
}
Variable_shp@data["Nr_den"] = Variable_shp@data["Nr"]/Variable_shp@data$Area_sqkm
Variable_df["Nr_den"] = Variable_df["Nr"]/Variable_df$Area_sqkm
col_X =
c( "Temple_den",  "School_den", "Train.stat_den",  "Clinic_den", # 公共建設
"Train.crow_den",
"M_F_RAT",  "YOUN_DEP", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta")
col_y= c('Nr')
col_y_den =c('Nr_den')
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.PO, type = "pearson")
res.work = residuals(glm.PO, type = "working")
qplot( c(1:sum(res.pear<1000)),res.pear[res.pear<1000], size = 2)
p1 = pdf_plot(res.pear, res.pear<60); p2 = point_plot(res.pear, res.pear<60)
ggpubr::ggarrange(p1, p2, ncol = 2)
qplot( c(1:length(res.pear)),res.pear)
p1 = pdf_plot(res.pear, res.pear<1000); p2 = point_plot(res.pear, res.pear<1000)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res.pear =res.pear,
glm.PO.res.work =res.work,
glm.PO.fit = fit.resp)
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.NB <- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
p1 = pdf_plot(res.pear, res.pear<1000); p2 = point_plot(res.pear,res.pear<1000)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
View(residual_df)
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
p1 = pdf_plot(res.pear,res.pear>-50 ); p2 = point_plot(res.pear,res.pear>-50)
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr #20
bw.gwr
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
###
# col_X_03 = c("Cluster","M_F_RAT","YOUN_DEP", "Income_sta")
# off = log(Variable_df$Area_sqkm)
# f = Nr~Cluster+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
bw.gwr #112
bw.gwr
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
col_X_03 = c("Cluster","Temple","School", "Clinic","M_F_RAT","YOUN_DEP", "Income_sta")
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
###
# col_X_03 = c("Cluster","M_F_RAT","YOUN_DEP", "Income_sta")
# off = log(Variable_df$Area_sqkm)
# f = Nr~Cluster+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
DM<-gw.dist(dp.locat=data.matrix(((Variable_df[c('X', "Y")]))))
bw.gwr <- bw.ggwr(f,
data = Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
approach = "AICc",
kernel = "gaussian",
adaptive = TRUE,
dMat = DM )
f = Nr~Cluster+Temple+School+Clinic+M_F+YOUN+Income+offset(log(Area_sqkm))
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
off = log(Variable_df$Area_sqkm)
f = Nr~Cluster+Temple+School+Clinic+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
# col_X_03 = c("Cluster","M_F_RAT","YOUN_DEP", "Income_sta")
# off = log(Variable_df$Area_sqkm)
# f = Nr~Cluster+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = bw.gwr,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
gwr.PO <- ggwr.basic(f,
data =Variable_shp[c(col_X_03, col_y, "Area_sqkm")],
family = "poisson",
bw = 112,
kernel = "gaussian",
adaptive = TRUE,
dMat = DM)
summary(gwr.PO$SDF$yhat+ gwr.PO$SDF$residual)
res.pear = (gwr.PO$SDF$yhat-gwr.PO$SDF$residual)/(gwr.PO$SDF$yhat)^.5
p1 = pdf_plot(res.pear,res.pear>-50 ); p2 = point_plot(res.pear,res.pear>-50)
ggpubr::ggarrange(p1, p2, ncol = 2)
p1 = pdf_plot(res.pear ); p2 = point_plot(res.pear)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["gwr.PO.res"] = res.pear
residual_df["gwr.PO.fit"] = gwr.PO$SDF$yhat
col_X_03 = c("Cluster","Temple_den","School_den", "Clinic_den","M_F_RAT","YOUN_DEP", "Income_sta")
f = Nr~Cluster+Temple_den+School_den+Clinic_den+M_F_RAT+YOUN_DEP+Income_sta+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.NB <- glm.nb(f ,data = Variable_df[c(col_X_03, col_y, col_offset)])
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res.pear = residuals(glm.NB, type = "pearson")
res.work = residuals(glm.NB, type = "working")
p1 = pdf_plot(res.pear, res.pear<1000); p2 = point_plot(res.pear,res.pear<1000)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["glm.NB.res.pear"] = res.pear
residual_df["glm.NB.fit"] = fit.resp
p1 = pdf_plot(res.pear, res.pear<10); p2 = point_plot(res.pear,res.pear<10)
ggpubr::ggarrange(p1, p2, ncol = 2)
