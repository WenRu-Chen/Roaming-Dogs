print(Variable_df[Variable_df$COUNTYNAME == "臺東縣",c('VILLCODE','COUNTYNAME','TOWNNAME','VILLNAME',col_X_03, col_y)])
Variable_df[Variable_df$COUNTYNAME == "臺東縣",c('VILLCODE','COUNTYNAME','TOWNNAME','VILLNAME',col_X_03, col_y)]
dt
dt = (Variable_df[Variable_df$COUNTYNAME == "臺東縣",c('VILLCODE','COUNTYNAME','TOWNNAME','VILLNAME',col_X_03, col_y)])
dt
View(dt)
name = residual_df$VILLCODE[residual_df$glm.NB.res>10]
code = residual_df$VILLCODE[residual_df$glm.NB.res>10]
code
dt = (Variable_df[Variable_df$VILLCODE %in% code ,c('VILLCODE','COUNTYNAME','TOWNNAME','VILLNAME',col_X_03, col_y)])
View(dt)
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_sta")
off = log(Variable_df$Area_sqkm)
glm.PO <- glm(Nr ~ ., offset = off, family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
summary(glm.PO)
res = glm.PO$residuals;idx.res = glm.PO$residuals<10
p1 = pdf_plot(glm.PO$residuals, idx = idx.res); p2 = point_plot(glm.PO$residuals, idx = idx.res)
res = glm.PO$residuals;idx.res = glm.PO$residuals<10
p1 = pdf_plot(glm.PO$residuals, idx = idx.res); p2 = point_plot(glm.PO$residuals, idx = idx.res)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals)
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_sta")
off = log(Variable_df$Area_sqkm)
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)])
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
res = glm.NB$residuals;idx.res = res<10
p1 = pdf_plot(res, idx = idx.res); p2 = point_plot(res, idx = idx.res)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["glm.NB.res"] = glm.NB$residuals
glm.NB$fitted.values
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values)
residual_df["glm.NB.fit"] = glm.NB$fitted.values
residual_df["glm.NB.res"] = glm.NB$residuals
residual_df["glm.NB.fit"] = glm.NB$fitted.values
log(67)
log(7)
exp(7)
```{r}
code = residual_df$VILLCODE[residual_df$glm.NB.res>10]
dt = (Variable_df[Variable_df$VILLCODE %in% code ,c('VILLCODE','COUNTYNAME','TOWNNAME','VILLNAME',col_X_03, col_y)])
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
glm.PO <- glm(Nr ~ ., offset = off, family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
summary(glm.PO)
res = glm.PO$residuals;idx.res = glm.PO$residuals<10
p1 = pdf_plot(glm.PO$residuals, idx = idx.res); p2 = point_plot(glm.PO$residuals, idx = idx.res)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values)
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)])
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
res = glm.NB$residuals;idx.res = res<10
p1 = pdf_plot(res, idx = idx.res); p2 = point_plot(res, idx = idx.res)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["glm.NB.res"] = glm.NB$residuals
residual_df["glm.NB.fit"] = glm.NB$fitted.values
log(7.71)
log(541)
log(7.71)-541
log(log(7.71)-541)
log(abs(log(7.71)-541))
glm.PO$effects
glm.PO$linear.predictors
f = Nr~Cluster+School_den+Clinic_den+M_F_RAT*Income_mea
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
glm.PO <- glm(Nr ~ ., offset = off, family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
summary(glm.PO)
f = Nr~Cluster+School_den+Clinic_den*M_F_RAT+Income_mea
off = log(Variable_df$Area_sqkm)
glm.PO <- glm(f., offset = off, family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
f = Nr~Cluster+School_den+Clinic_den*M_F_RAT+Income_mea
glm.PO <- glm(f, offset = off, family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
summary(glm.PO)
res = glm.PO$residuals;idx.res = glm.PO$residuals<10
p1 = pdf_plot(glm.PO$residuals, idx = idx.res); p2 = point_plot(glm.PO$residuals, idx = idx.res)
res = glm.PO$residuals;idx.res = glm.PO$residuals
p1 = pdf_plot(glm.PO$residuals, idx = idx.res); p2 = point_plot(glm.PO$residuals, idx = idx.res)
p1 = pdf_plot(glm.PO$residuals); p2 = point_plot(glm.PO$residuals)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values)
log(852)
541-log(7.62)
541-exp(7.62)
f = Nr~Cluster+School_den+Clinic_den*M_F_RAT+Income_mea
# glm.PO <- glm(f, offset = off, family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
summary(glm.PO)
f = Nr~Cluster+School_den+Clinic_den+M_F_RAT+Income_mea
# glm.PO <- glm(f, offset = off, family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
summary(glm.PO)
res = glm.PO$residuals
idx.res = glm.PO$residuals
p1 = pdf_plot(glm.PO$residuals); p2 = point_plot(glm.PO$residuals)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values)
541-exp(19.1648624)
log(abs(541-exp(19.1648624)))
autoplot(glm.PO,which=1)
f = Nr~Cluster+School_den+Clinic_den+M_F_RAT+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
f = Nr~Cluster+School_den+Clinic_den+M_F_RAT+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
# glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03)])
summary(glm.PO)
res = glm.PO$residuals
idx.res = glm.PO$residuals
p1 = pdf_plot(glm.PO$residuals); p2 = point_plot(glm.PO$residuals)
ggpubr::ggarrange(p1, p2, ncol = 2)
autoplot(glm.PO,which=1)
autoplot(glm.PO,which=1)
fitted(glm.PO)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values
glm.PO.fit.2 = fitted(glm.PO))
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values,
glm.PO.fit.2 = fitted(glm.PO))
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values)
qplot(x = fitted(glm.PO), y = residuals(glm.PO))
qplot(x = fitted(glm.PO), y = glm.PO$residuals)
qplot(x = glm.PO$fitted.values, y = glm.PO$residuals)
qplot(x = glm.NB$fitted.values, y = glm.NB$residuals)
residual_df["glm.NB.res"] = glm.NB$residuals
residual_df["glm.NB.fit"] = glm.NB$fitted.values
glm.NB$linear.predictors
qplot(x = glm.NB$linear.predictors, y = glm.NB$residuals)
predict(glm.NB, newdata=py, se.fit=TRUE, type='response')
predict(glm.NB, newdata=Variable_df[col_X_03, col_y, col_offset], se.fit=TRUE, type='response')
predict(glm.NB, newdata=Variable_df[c(col_X_03, col_y, col_offset)], se.fit=TRUE, type='response')
res = glm.NB$residuals;idx.res = res<10
pre = predict(glm.NB, newdata=Variable_df[c(col_X_03, col_y, col_offset)], se.fit=TRUE, type='response')
p1 = pdf_plot(res, idx = idx.res); p2 = point_plot(res, idx = idx.res)
ggpubr::ggarrange(p1, p2, ncol = 2)
qplot(x = pre, y = glm.NB$residuals)
pre
qplot(x = pre$fit, y = glm.NB$residuals)
pre$fit
qplot(x = pre$fit, y = glm.NB$residuals)
qplot(x = pre$fit, y = glm.NB$residuals)
qplot(x = pre$se.fit, y = glm.NB$residuals)
??predict
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=14, fig.height=6)
library(GWmodel)      ### GW models
library(dplyr)
library(sp)           ## Data management
library(car)          ## vif
library(spdep)        ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(raster)       ## spatial data
library(grid)         # plot
library(gridExtra)    # Multiple plot
library(ggplot2)      # Multiple plot
library(gtable)
library(GGally)       # 相關係數圖矩陣（scatter plot matrix）
library(maptools)
library(MASS)
library(tmap)
pdf_plot <- function(x, idx = c(rep(TRUE, length(x)))){
g = ggplot()+
geom_histogram(aes(x = x[idx], y = ..density..),
fill = '#557C55', alpha = 0.8)+
geom_density(aes(x = x[idx], y = ..density..),
color = '#062C30', size = 1)+
theme_bw()
return(g)
}
point_plot <- function(x, idx = c(rep(TRUE, length(x)))){
g = ggplot()+
geom_point(aes(x = Variable_df$X[idx], y = Variable_df$Y[idx], color = x[idx] , alpha = .8, size = x[idx]))+
scale_colour_gradient2(low = "#E8630A",mid = "#F8B400", high = "#005555")+
theme_bw()
return(g)
}
path = '..\\..\\Roaming-Dogs-Data\\'
# Variable_df <- read.csv(paste0(path, "@Taiwan_sampling_village_variable\\Taiwan_sampling_village_variable.shp" ), fileEncoding = 'utf-8')
Variable_shp<-shapefile(paste0(path, "@Taiwan_sampling_village_variable\\Taiwan_sampling_village_variable.shp" ),encoding = 'utf-8')
Variable_shp@data["School"] <- rowSums(Variable_shp@data[c("Ele","Junior" ,"Senior")])
Variable_shp@data[is.na(Variable_shp@data)] <- 0
Variable_shp@data$Nr = Variable_shp@data$Nr %>% as.integer()
Variable_df = Variable_shp@data
col_X =
c( "Cluster", # 分群
"Hospital","Clinic", "Temple", "Ele","Junior" ,"Senior", "Train.stat", # 公共建設
"Ele_stu", "Junior_stu" ,"Senior_stu", "Train.crow", # 人流
"high_rat",   "mid_rat","low_rat", "M_F_RAT" , "P_DEN", "YOUN_DEP","OLD_DEP","AGING_IDX", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta") # 村里收入
col_X =
c( "Cluster", # 分群
"Clinic", "Temple", "School" ,"Train.stat", # 公共建設
"Train.crow", # 人流
"M_F_RAT" ,"YOUN_DEP", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta") # 村里收入
col_y = c('Nr')
pdf_plot(Variable_df$Clinic)
point_plot(Variable_df$Clinic)
sum(Variable_df$Clinic == 0)/ length(Variable_df$Clinic)
for(i in c(col_X, col_y, "P_CNT")){
Variable_shp@data[i] = sapply(Variable_shp@data[i], function(x) as.numeric(x))
Variable_df[i] = sapply(Variable_df[i], function(x) as.numeric(x))
}
idx_clu_1 = Variable_df$Cluster == 1
sum(Variable_df$Nr[!idx_clu_1]==0)/sum(!idx_clu_1); sum(Variable_df$Nr[idx_clu_1]==0)/sum(idx_clu_1); sum(Variable_df$Nr==0)/nrow(Variable_df)
pdf_plot(Variable_df$Nr[!idx_clu_1])+xlab("density of Nr(Cluster is 2,3,4 都市化較低)")
pdf_plot(Variable_df$Nr[idx_clu_1])+xlab("density of Nr (Cluster is 1 都市化較高)")
g = ggplot(data = Variable_df)+
geom_boxplot(aes(x = as.factor(Cluster), y = Nr))
g
corr = cor(Variable_df[idx_clu_1,c(col_y, col_y_den,col_X)])
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
f = Nr~Cluster+School_den+Clinic_den+M_F_RAT+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
f = Nr~Cluster+School_den+Clinic_den+M_F_RAT+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
col_y
col_X_03
col_offset
Area_sqkm
col_offset
col_X_03
col_y
colnames(Variable_df)
Variable_df[col_X_03]
point_plot(Variable_df$Nr)
pdf_plot(Variable_df$Nr)
pdf_plot(Variable_df$Nr, idx = Variable_df$Nr<250)
point_plot(Variable_df$Nr, idx = Variable_df$Nr<250)
point_plot(Variable_df$Nr, idx = Variable_df$Nr<250)
pdf_plot(Variable_df$Nr, idx = Variable_df$Nr<250)
sum( Variable_df$Nr<250)
sum( Variable_df$Nr<250)
pdf_plot(Variable_df$Nr, idx = Variable_df$Nr<250)
point_plot(Variable_df$Nr, idx = Variable_df$Nr<250)
sum(Variable_df$Clinic == 0)/ length(Variable_df$Clinic)
for(i in c(col_X, col_y, "P_CNT")){
Variable_shp@data[i] = sapply(Variable_shp@data[i], function(x) as.numeric(x))
Variable_df[i] = sapply(Variable_df[i], function(x) as.numeric(x))
}
for(i in c( "Temple",  "School", "Train.stat",  "Clinic","Ele_stu", "Junior_stu" ,"Senior_stu", "Train.crow")){
i_new = paste0(i, "_den")
Variable_shp@data[i_new] = Variable_shp@data[i]/Variable_shp@data$P_CNT
Variable_df[i_new] = Variable_df[i]/Variable_df$P_CNT
}
Variable_shp@data["Nr_den"] = Variable_shp@data["Nr"]/Variable_shp@data$P_CNT
Variable_df["Nr_den"] = Variable_df["Nr"]/Variable_df$P_CNT
col_X =
c( "Temple_den",  "School_den", "Train.stat_den",  "Clinic_den", # 公共建設
"Train.crow_den",
"M_F_RAT",  "YOUN_DEP", # 人口統計(教育程度、人口密度...)
"Income_mea","Income_sta")
col_y= c('Nr')
col_y_den =c('Nr_den')
idx_clu_1 = Variable_df$Cluster == 1
sum(Variable_df$Nr[!idx_clu_1]==0)/sum(!idx_clu_1); sum(Variable_df$Nr[idx_clu_1]==0)/sum(idx_clu_1); sum(Variable_df$Nr==0)/nrow(Variable_df)
pdf_plot(Variable_df$Nr[!idx_clu_1])+xlab("density of Nr(Cluster is 2,3,4 都市化較低)")
pdf_plot(Variable_df$Nr[idx_clu_1])+xlab("density of Nr (Cluster is 1 都市化較高)")
corr = cor(Variable_df[idx_clu_1,c(col_y, col_y_den,col_X)])
idx = abs(corr[,col_y_den])>.05 | abs(corr[,col_y])>.05
col_X_den = c("Temple_den",  "School_den", "Train.stat_den",  "Clinic_den")
corr[col_X_den,col_X_den]
col_X_02 = names(corr[idx,col_y_den]) %>% tail(-2)
corr[idx,idx]
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
f = Nr~Cluster+School_den+Clinic_den+M_F_RAT+Income_mea+offset(log(Area_sqkm))
col_offset = c("Area_sqkm")
glm.PO <- glm(f,  family = poisson(link = "log"), data = Variable_df[c(col_y, col_X_03, col_offset)])
summary(glm.PO)
res = glm.PO$residuals
idx.res = glm.PO$residuals
p1 = pdf_plot(glm.PO$residuals); p2 = point_plot(glm.PO$residuals)
ggpubr::ggarrange(p1, p2, ncol = 2)
qplot(x = glm.PO$fitted.values, y = glm.PO$residuals)
res = glm.PO$residuals
idx.res = glm.PO$residuals
p1 = pdf_plot(glm.PO$residuals); p2 = point_plot(glm.PO$residuals)
ggpubr::ggarrange(p1, p2, ncol = 2)
qplot(x = glm.PO$fitted.values, y = glm.PO$residuals)
ggpubr::ggarrange(p1, p2, ncol = 2)
ggpubr::ggarrange(p1, p2, ncol = 2)
idx.res = glm.PO$residuals<10
p1 = pdf_plot(glm.PO$residuals, idx.res); p2 = point_plot(glm.PO$residuals, idx.res)
ggpubr::ggarrange(p1, p2, ncol = 2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=14, fig.height=6)
idx_clu_1 = Variable_df$Cluster == 1
sum(Variable_df$Nr[!idx_clu_1]==0)/sum(!idx_clu_1); sum(Variable_df$Nr[idx_clu_1]==0)/sum(idx_clu_1); sum(Variable_df$Nr==0)/nrow(Variable_df)
pdf_plot(Variable_df$Nr[!idx_clu_1])+xlab("density of Nr(Cluster is 2,3,4 都市化較低)")
pdf_plot(Variable_df$Nr[idx_clu_1])+xlab("density of Nr (Cluster is 1 都市化較高)")
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values)
predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], terms)
predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = terms)
Variable_df[c(col_y, col_X_03, col_offset)]
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values
glm.PO.fit.exp = exp(glm.PO$fitted.values))
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values,
glm.PO.fit.exp = exp(glm.PO$fitted.values))
for(i in c( "Temple",  "School", "Train.stat",  "Clinic","Ele_stu", "Junior_stu" ,"Senior_stu", "Train.crow")){
i_new = paste0(i, "_den")
Variable_shp@data[i_new] = Variable_shp@data[i]/Variable_shp@data$P_CNT
Variable_df[i_new] = Variable_df[i]/Variable_df$P_CNT
}
Variable_shp@data["Nr_den"] = Variable_shp@data["Nr"]/Variable_shp@data$Area_sqkm
Variable_df["Nr_den"] = Variable_df["Nr"]/Variable_df$Area_sqkm
res = glm.PO$residuals
idx.res = glm.PO$residuals<10
p1 = pdf_plot(glm.PO$residuals, idx.res); p2 = point_plot(glm.PO$residuals, idx.res)
ggpubr::ggarrange(p1, p2, ncol = 2)
qplot(x = glm.PO$fitted.values, y = glm.PO$residuals)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values,
glm.PO.fit.exp = exp(glm.PO$fitted.values))
predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link")
pre.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response")
pre.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link")
head(pre.resp)
head(pre.resp); head(pre.link)
head(log(pre.resp)); head(pre.link)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res = glm.PO$residuals,
glm.PO.fit = glm.PO$fitted.values)
```{r}
residual_df["glm.NB.res"] = glm.NB$residuals
residual_df["glm.NB.fit"] = glm.NB$fitted.values
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)])
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
res = glm.NB$residuals;idx.res = res<10
pre = predict(glm.NB, newdata=Variable_df[c(col_X_03, col_y, col_offset)], se.fit=TRUE, type='response')
p1 = pdf_plot(res, idx = idx.res); p2 = point_plot(res, idx = idx.res)
ggpubr::ggarrange(p1, p2, ncol = 2)
qplot(x = pre$se.fit, y = glm.NB$residuals)
residual_df["glm.NB.res"] = glm.NB$residuals
residual_df["glm.NB.fit"] = glm.NB$fitted.values
residuals(glm.NB, type = "response")
residuals(glm.PO, type = "response")
res.link = residuals(glm.PO, type = "link")
res.link = residuals(glm.PO, type = "link")
res.resp = residuals(glm.PO, type = "response")
head(res.resp); head(glm.PO$residuals)
residual_df = data.frame(VILLCODE = Variable_df$VILLCODE,
COUNTYNAME = Variable_df$COUNTYNAME,
TOWNNAME = Variable_df$TOWNNAME,
VILLNAME = Variable_df$VILLNAME,
Nr= Variable_df$Nr,
Cluster = Variable_df$Cluster,
glm.PO.res =residuals(glm.PO, type = "response"),
glm.PO.fit = glm.PO$fitted.values)
autoplot(glm.PO,which=1)
res = residuals(glm.PO, type = "response")
idx.res = glm.PO$residuals<10
p1 = pdf_plot(glm.PO$residuals); p2 = point_plot(glm.PO$residuals)
ggpubr::ggarrange(p1, p2, ncol = 2)
res = residuals(glm.PO, type = "response")
idx.res = glm.PO$residuals<10
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
qplot(x = glm.PO$fitted.values, y = glm.PO$residuals)
ggpubr::ggarrange(p1, p2, ncol = 2)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用log 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res = res.resp = residuals(glm.PO, type = "response")
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
fit.resp = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用log 轉過的
fit.link = predict(glm.PO, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res = res.resp = residuals(glm.PO, type = "response")
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
exp(fit.link) %>% head()
exp(fit.link) %>% head(); fit.resp %>% head()
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res = res.resp = residuals(glm.NB, type = "response")
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["glm.NB.res"] = glm.NB$residuals
residual_df["glm.NB.fit"] = glm.NB$fitted.values
residual_df["glm.NB.res"] = res.resp
residual_df["glm.NB.fit"] = fit.resp
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)], link = "log")
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
fit.resp = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "response") # 已用 exp 轉過的
fit.link = predict(glm.NB, newdata = Variable_df[c(col_y, col_X_03, col_offset)], type = "link") # log(mu_i)
res = res.resp = residuals(glm.NB, type = "response")
p1 = pdf_plot(res); p2 = point_plot(res)
ggpubr::ggarrange(p1, p2, ncol = 2)
residual_df["glm.NB.res"] = res.resp
residual_df["glm.NB.fit"] = fit.resp
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)], link = "sqrt")
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)], link = "sqrt")
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)])
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)])
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
col_X_03 = c("Cluster","School_den", "Clinic_den","M_F_RAT", "Income_mea")
off = log(Variable_df$Area_sqkm)
glm.NB <- glm.nb(Nr ~.  + offset(off),data = Variable_df[c(col_X_03, col_y)])
# glm.NB.1 <- glm.nb(Nr ~.  + offset(off[idx_clu_1]),data = Variable_df[idx_clu_1,c(col_X_03, col_y)])
# glm.NB.2 <- glm.nb(Nr ~.  + offset(off[!idx_clu_1]),data = Variable_df[!idx_clu_1,c(col_X_03, col_y)])
summary(glm.NB)
